* linkeo en html con etiqueta 
<script  src= "./ruta/del/archivo.js"> </script>

* Tambien le tenemos que agregar atributos que nobloqueen el resto del codigo
para identificar la funcionalidad basica del script:

"async" --> para que se ejecute independientemente al html
"defer" --> para que se ejecute luego de la carga completa del html

<script async//defer src= "./ruta/del/archivo.js"> </script>

-- muestreo en consola --

console.log("MENSAJE")
console.warn("MENSAJE DE ADVERTENCIA")
console.error("MENSAJE DE ERROR")

--- DECLARACION DE VARIABLES ----
 let (nombre variable) = (valor) // al poner el igual la instanciamos
 
 var (nombre) = (valor) // ya no es recomendable el uso de "var"

 const (nombre constante) = (valor) 
 // const es un valor que se espera mantener fijo siempre


--- FUNCIONES NATIVAS --

//funcion prompt -- se usa para pedir texto(valor string)
let (variable_de_guardado) = prompt(´ingrese un texto/string´)

//funcion alert --  mensaje 
alert("mensaje a mostrar")

//funcion confirm -- true o false (booleano)
let (variable_de_guardado) confirm("pregunta de aceptar/cancelar")

//funcion Parse .. "Cambiar a" (de texto a numero )
parseInt(variable) -- cambio a entero
parseFloat(variable) -- cambio a decimal (flotante)


--- CONCATENACION--
para mostrar datos por consola y/o alerts podemos concatenar 
texto entre " ", nombre de variables,etc  separando con --> +

--- OPERACIONES --

Suma--> +
Resta --> -
Multiplicacion --> *
Division --> /

--- TIPO DE DATOS --
STRING - "texto"
NUMBER - Numeros
Boolean - True // false
Float - decimales
Char - un solo caracter

----CONDICIONALES ----
Estructuras sintacticas para evaluar una CONDICIONALES
dando como resultado booleano TRUE o FALSE 

**Sintaxis**

if(CONDICION){ --> Si no igualamos a false siempre toma true
    //CODIGO DE ACCION

}else{ --> "Y SI NO"

    //CONDIGO DE ACCION
}

--OPERADORES DE COMPARACION ---

X == Y --> ES EXACTAMENTE IGUAL

X < Y --> MENOR QUE

X <= Y -- > MENOR IGUAL

X > Y --> MAYOR QUE

X >= Y --> MAYOR O IGUAL

X =! Y ---> DISTINTO A 


---OPERADORES LOGICOS --

&& ---> AND 
|| ---> OR 
! -->

---CICLO FOR --- //Se sabe cuantas veces se repite

for (desde;hasta;i++){  // --> Hasta* puede incluir variables numericas (en lo posible que sea constante)
    (let i=0;i<10;i++)    
}

sentencia --  break == terminar for antes 

for (let i=0;i<10;i++){

    if(i==5){
        console.warn(Interrumpo for);
        break; ---> sentencia de corte
    }

}

sentencia --  CONTINUE == Saltear una vuelta

for (let i=0;i<10;i++){

    if(i==5){
        console.warn(Interrumpo for);
        continue; ---> sentencia de salteo
    }

}


-- CICLO WHILE -- Se repite mientras se cumpla una condicion planteada

let = 1

while(i<6){
   console.log("iteracion N° "+i); //muestreo
   i++ // incremento para no etrar en un ciclo infinito
}

DO WHILE (se inicia si o si una vez y luego la condicion )

do{
    //bloque de codigo a ejecutar

}while(condicion)


Estructura SWITCH -- forma elegante de if anidados (menu)

switch(variable){  -->variable a evaluar
            
    case 1: ---> cada caso u opcion se escribe case
        //tarea a realizar
        break;
    case 2:
        //tarea a realizar
        break;
    case 3:
        //tarea a realizar
        break;

    default: --> funciona como else (si no se cumplen ninguno de los casos)
        //tarea a realizar;
        break;
}

El valor de la variable tiene que coincidir exactamente con el del case

----------ALGORITMOS-----------
     Simples y condicionales
conjunto de sentencias ordenadas para un FUNCIONES

------------FUNCIONES------------------
Algoritmos autocontenidos dentro de un bloque de codigo
Podemos llamarlas cuando queramos en el momento que necesitemos

Podemos llamar una funcion como parametro, valor, argumento,etc.

*Declarar una funcion*
    --Funciones Declaradas 
        function nombreFuncion( ){
            //bloque de instrucciones
        }

        *Llamado de funcion*

        nombreFuncion(); --> escribo el nombre + ()

        **nombrar a las funciones explicitamente con su uso

        ejemplo console.log(sumar());

        ** Variables y funciones
        Lo que se guarda en una variable es el return de la funcion

        **Parametros de funciones

        datos que necesita una funcion para ejecutarse correctamente.
        Se expresan dentro de los parentesis

        function saludar(nombre,edad){
            console.log("soy "+nombre+" y tengo "+edad)
        }

        saludar("dami",21)


    --Funciones Expresadas --> no necesitan nombre ( se guardan en variables)

        crear const nombreConst= function(){
            //instrucciones
        }

        nombreConst();

        ¡No puden ejecutarse antes de su declaracion!


---PRINCIPIOS FUNDAMENTALES ---

    ---D.R.Y ---
    (Dont Repeat Yourself) -- No repitas

    todas tareas que se repitan guardalas en funciones

    --K.I.S.S--
    (Kepp It Simple Stupid!) -- Mantenlo Simple

    No hagas funciones complicadas.
    Desarma los problemas y resuelve con funciones resumidas

    --Y.A.G.N.I---
    (You Aren´t Gonna Need It) - No lo necesitas

    Si no lo necesitas - borralo





